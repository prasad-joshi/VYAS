#!/usr/bin/python

import commands
import log

import pprint
from xml.etree.ElementTree import parse

class CppCheckXMLParser(object):
    def __init__(self, xml_file):
        self.xml_file = xml_file
        self.errors = {}

    def parse(self):
        """ parse the xml file. A sample xml result generated by cppcheck:

        <?xml version="1.0" encoding="UTF-8"?>
        <results>
        Checking CPrograms/test.c...
        <error file="test.c" line="5" id="unusedAllocatedMemory"
                severity="style" msg="..."/>
        <error file=".." line="6" id=".." severity="error"
                msg="Memory leak: f"/>
        </results>

        """

        tree = parse(self.xml_file)
        j = 0

        for e in tree.findall("error"):
            f = e.attrib["file"]
            l = e.attrib["line"]
            i = e.attrib["id"]
            s = e.attrib["severity"]
            m = e.attrib["msg"]

            self.errors[j]              = {}
            self.errors[j]["file"]      = f
            self.errors[j]["line"]      = l
            self.errors[j]["id"]        = i
            self.errors[j]["severity"]  = s
            self.errors[j]["msg"]       = m

            j += 1


        return self.errors

class CppCheck(object):

    CPPCHECK_PATH = None
    WHICH = "/usr/bin/which"

    def __init__(self, file_name):
        """ initialization
        """
        self.file_name = file_name      # source file to analyse

        if not self.CPPCHECK_PATH:
            self.__cpp_check_path__()
        pass

    def _run_command(self, cmd):
        """ run a command
        """
        log.log(3, cmd)
        return commands.getstatusoutput(cmd)

    def __cpp_check_path__(self):
        """ find cppcheck path
        """
        r, o = self._run_command(self.WHICH + " cppcheck")
        if r != 0:
            assert(0)
        self.CPPCHECK_PATH = o
        return r

    def is_installed(self):
        """ check if cppcheck tool is installed
        """
        r = self.__cpp_check_path__()
        if r == 0:
            return 0
        return 1

    def run_cpp_check(self, args):
        """ run cppcheck
        """
        # for now let's assume --enable=style argument, we might decide to
        # change it latter on
        default_args = " --enable=style "
        return self._run_command(self.CPPCHECK_PATH + default_args + args)

    def analyse(self):
        """ analyse source code using cppcheck
        """
        xml = "/tmp/output.xml"
        args = " --xml " + self.file_name + " 2> " + xml

        log.log(3, "analysing cpp code using cppcheck")
        r, o = self.run_cpp_check(args)
        log.log(3, o)

        x = CppCheckXMLParser(xml)
        errors = x.parse()

        pprint.pprint(errors)
